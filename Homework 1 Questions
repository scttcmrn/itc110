Chapter 1 Questions



1. Which of the following are operators, and which are values?

*          -Operator
'hello'    -Value
-88.8      -Value
-          -Operator
/          -Operator
+          -Operator
5          -Value


2. Which of the following is a variable, and which is a string?

spam       -Variable
'spam'     -String


3. Name three data types.

Integer, Floating-point, and String


4. What is an expression made up of? What do all expressions do?

Expressions are made up of values and operators and they can always evaluate, or reduce, down to a single value.


5. This chapter introduced assignment statements, like spam = 10. What is the difference between an expression and a statement?

Expressions evaluate to reach a value and statements assign fixed values.


6. What does the variable bacon contain after the following code runs?

bacon = 20
bacon + 1

A value of 21


7. What should the following two expressions evaluate to?

'spam' + 'spamspam'   =>   'spamspamspam'
'spam' * 3            =>   'spamspamspam'


8. Why is eggs a valid variable name while 100 is invalid?

Variable names cannot begin with numbers.


9. What three functions can be used to get the integer, floating-point number, or string version of a value?

str(), int(), and float()


10. Why does this expression cause an error? How can you fix it?

'I have eaten ' + 99 + ' burritos.'

'I have eaten ' + 99 + ' burritos.' The expression causes an error because the integer 99 cannot be concatenated to the strings ‘I have eaten’ and ‘burritos.’ In order to fix it, convert the integer to a string using the str() function. ‘I have eaten ’ + str(99) + ‘ burritos.’


Extra credit: Search online for the Python documentation for the len() function. It will be on a web page titled “Built-in Functions.” Skim the list of other functions Python has, look up what the round() function does, and experiment with it in the interactive shell.

round() will round a specified number to a specified digit. round(number, ndigits) 

From https://docs.python.org/2/library/functions.html#round

Return the floating point value number rounded to ndigits digits after the decimal point. If ndigits is omitted, it defaults to zero.
